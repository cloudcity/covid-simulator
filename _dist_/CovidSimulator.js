import './CovidSimulator.css.proxy.js';
/* src/CovidSimulator.svelte generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	add_flush_callback,
	add_render_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	detach,
	element,
	get_binding_group_value,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { fade } from "../web_modules/svelte/transition.js";
import wNumb from "../web_modules/wnumb.js";
import RangeSlider from "./RangeSlider.js";
import CovidGraph from "./CovidGraph.js";

function create_if_block_5(ctx) {
	let section;
	let div0;
	let raw0_value = /*explain*/ ctx[11].name + "";
	let t0;
	let div1;
	let raw1_value = /*explain*/ ctx[11].body + "";
	let t1;
	let button;
	let section_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			section = element("section");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			button = element("button");
			button.textContent = "Back";
			attr(div0, "class", "control-name svelte-jt39wy");
			attr(div1, "class", "control-explanation svelte-jt39wy");
			attr(button, "class", "explain-back svelte-jt39wy");
			attr(section, "class", "explain svelte-jt39wy");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			div0.innerHTML = raw0_value;
			append(section, t0);
			append(section, div1);
			div1.innerHTML = raw1_value;
			append(section, t1);
			append(section, button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*showExplanation*/ ctx[14]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*explain*/ 2048) && raw0_value !== (raw0_value = /*explain*/ ctx[11].name + "")) div0.innerHTML = raw0_value;;
			if ((!current || dirty[0] & /*explain*/ 2048) && raw1_value !== (raw1_value = /*explain*/ ctx[11].body + "")) div1.innerHTML = raw1_value;;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!section_transition) section_transition = create_bidirectional_transition(section, fade, {}, true);
				section_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!section_transition) section_transition = create_bidirectional_transition(section, fade, {}, false);
			section_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (detaching && section_transition) section_transition.end();
			mounted = false;
			dispose();
		}
	};
}

// (406:4) {#if stacked}
function create_if_block_4(ctx) {
	let section;
	let div0;
	let label0;
	let input0;
	let input0_value_value;
	let t0;
	let t1;
	let div1;
	let t2;
	let div2;
	let t6;
	let div3;
	let label1;
	let input1;
	let input1_value_value;
	let t7;
	let t8;
	let div4;
	let label2;
	let input2;
	let input2_value_value;
	let t9;
	let t10;
	let div6;
	let div5;
	let updating_values;
	let current;
	let mounted;
	let dispose;

	function rangeslider_values_binding(value) {
		/*rangeslider_values_binding*/ ctx[24].call(null, value);
	}

	let rangeslider_props = {
		max: days,
		step: 1,
		tooltip: /*tooltip*/ ctx[12],
		disabled: !/*enabled*/ ctx[9].includes("Quarantine")
	};

	if (/*quarantine*/ ctx[8] !== void 0) {
		rangeslider_props.values = /*quarantine*/ ctx[8];
	}

	const rangeslider = new RangeSlider({ props: rangeslider_props });
	binding_callbacks.push(() => bind(rangeslider, "values", rangeslider_values_binding));

	return {
		c() {
			section = element("section");
			div0 = element("div");
			label0 = element("label");
			input0 = element("input");
			t0 = text("\n            Quarantine infected on days");
			t1 = space();
			div1 = element("div");
			t2 = space();
			div2 = element("div");

			div2.innerHTML = `
          Control of COVID-19 requires the effective testing and isolation and quarantine of contacts. Users should determine whether a household quarantine strategy will be adopted (lower resource intensity; we assume 37% reduction in transmission) or an extended contact tracing strategy and quarantine of all extended contacts will be used (higher resource intensity; we assume 52% reduction in transmission. (<a href="https://cmmid.github.io/topics/covid19/reports/bbc_contact_tracing.pdf" target="_blank" class="svelte-jt39wy">Reference</a>)
        `;

			t6 = space();
			div3 = element("div");
			label1 = element("label");
			input1 = element("input");
			t7 = text("\n            Quarantine household only");
			t8 = space();
			div4 = element("div");
			label2 = element("label");
			input2 = element("input");
			t9 = text("\n            Quarantine all contacts");
			t10 = space();
			div6 = element("div");
			div5 = element("div");
			create_component(rangeslider.$$.fragment);
			attr(input0, "type", "checkbox");
			input0.__value = input0_value_value = "Quarantine";
			input0.value = input0.__value;
			attr(input0, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][0].push(input0);
			attr(label0, "class", "control-label svelte-jt39wy");
			attr(div0, "class", "control-name svelte-jt39wy");
			toggle_class(div0, "enabled", /*enabled*/ ctx[9].includes("Quarantine"));
			attr(div1, "class", "control-tooltip svelte-jt39wy");
			attr(div2, "class", "control-explanation svelte-jt39wy");
			attr(input1, "type", "radio");
			input1.__value = input1_value_value = false;
			input1.value = input1.__value;
			attr(input1, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][1].push(input1);
			attr(label1, "class", "control-label svelte-jt39wy");
			toggle_class(label1, "tracing", !/*tracing*/ ctx[2]);
			attr(div3, "class", "control-group radio svelte-jt39wy");
			attr(input2, "type", "radio");
			input2.__value = input2_value_value = true;
			input2.value = input2.__value;
			attr(input2, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][1].push(input2);
			attr(label2, "class", "control-label svelte-jt39wy");
			toggle_class(label2, "tracing", /*tracing*/ ctx[2]);
			attr(div4, "class", "control-group radio svelte-jt39wy");
			attr(div5, "class", "slider-container svelte-jt39wy");
			attr(div6, "class", "control-group slider svelte-jt39wy");
			attr(section, "class", "control control-radio svelte-jt39wy");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			append(div0, label0);
			append(label0, input0);
			input0.checked = ~/*enabled*/ ctx[9].indexOf(input0.__value);
			append(label0, t0);
			append(section, t1);
			append(section, div1);
			append(section, t2);
			append(section, div2);
			append(section, t6);
			append(section, div3);
			append(div3, label1);
			append(label1, input1);
			input1.checked = input1.__value === /*tracing*/ ctx[2];
			append(label1, t7);
			append(section, t8);
			append(section, div4);
			append(div4, label2);
			append(label2, input2);
			input2.checked = input2.__value === /*tracing*/ ctx[2];
			append(label2, t9);
			append(section, t10);
			append(section, div6);
			append(div6, div5);
			mount_component(rangeslider, div5, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler*/ ctx[20]),
					listen(div1, "click", /*showExplanation*/ ctx[14]),
					listen(input1, "change", /*input1_change_handler*/ ctx[22]),
					listen(input2, "change", /*input2_change_handler*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*enabled*/ 512) {
				input0.checked = ~/*enabled*/ ctx[9].indexOf(input0.__value);
			}

			if (dirty[0] & /*enabled*/ 512) {
				toggle_class(div0, "enabled", /*enabled*/ ctx[9].includes("Quarantine"));
			}

			if (dirty[0] & /*tracing*/ 4) {
				input1.checked = input1.__value === /*tracing*/ ctx[2];
			}

			if (dirty[0] & /*tracing*/ 4) {
				toggle_class(label1, "tracing", !/*tracing*/ ctx[2]);
			}

			if (dirty[0] & /*tracing*/ 4) {
				input2.checked = input2.__value === /*tracing*/ ctx[2];
			}

			if (dirty[0] & /*tracing*/ 4) {
				toggle_class(label2, "tracing", /*tracing*/ ctx[2]);
			}

			const rangeslider_changes = {};
			if (dirty[0] & /*enabled*/ 512) rangeslider_changes.disabled = !/*enabled*/ ctx[9].includes("Quarantine");

			if (!updating_values && dirty[0] & /*quarantine*/ 256) {
				updating_values = true;
				rangeslider_changes.values = /*quarantine*/ ctx[8];
				add_flush_callback(() => updating_values = false);
			}

			rangeslider.$set(rangeslider_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangeslider.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangeslider.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			/*$$binding_groups*/ ctx[21][0].splice(/*$$binding_groups*/ ctx[21][0].indexOf(input0), 1);
			/*$$binding_groups*/ ctx[21][1].splice(/*$$binding_groups*/ ctx[21][1].indexOf(input1), 1);
			/*$$binding_groups*/ ctx[21][1].splice(/*$$binding_groups*/ ctx[21][1].indexOf(input2), 1);
			destroy_component(rangeslider);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (442:27) {#if stacked}
function create_if_block_3(ctx) {
	let t;

	return {
		c() {
			t = text("on days");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (445:6) {#if stacked}
function create_if_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "Overrides interventions below";
			attr(div, "class", "control-note svelte-jt39wy");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (449:8) {#if simple}
function create_if_block_1(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "Day";
			attr(span, "class", "control-label svelte-jt39wy");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (456:4) {#if stacked}
function create_if_block(ctx) {
	let section0;
	let div0;
	let label0;
	let input0;
	let input0_value_value;
	let t0;
	let t1;
	let div1;
	let t2;
	let div2;
	let t6;
	let div4;
	let div3;
	let updating_values;
	let t7;
	let section1;
	let div5;
	let label1;
	let input1;
	let input1_value_value;
	let t8;
	let t9;
	let div6;
	let t10;
	let div7;
	let t14;
	let div9;
	let div8;
	let updating_values_1;
	let t15;
	let section2;
	let div10;
	let label2;
	let input2;
	let input2_value_value;
	let t16;
	let t17;
	let div11;
	let t18;
	let div12;
	let t22;
	let div14;
	let div13;
	let updating_values_2;
	let current;
	let mounted;
	let dispose;

	function rangeslider0_values_binding(value) {
		/*rangeslider0_values_binding*/ ctx[28].call(null, value);
	}

	let rangeslider0_props = {
		max: days,
		step: 1,
		tooltip: /*tooltip*/ ctx[12],
		disabled: !/*enabled*/ ctx[9].includes("School closure")
	};

	if (/*schools*/ ctx[6] !== void 0) {
		rangeslider0_props.values = /*schools*/ ctx[6];
	}

	const rangeslider0 = new RangeSlider({ props: rangeslider0_props });
	binding_callbacks.push(() => bind(rangeslider0, "values", rangeslider0_values_binding));

	function rangeslider1_values_binding(value) {
		/*rangeslider1_values_binding*/ ctx[30].call(null, value);
	}

	let rangeslider1_props = {
		max: days,
		step: 1,
		tooltip: /*tooltip*/ ctx[12],
		disabled: !/*enabled*/ ctx[9].includes("Cancel mass gatherings")
	};

	if (/*gathers*/ ctx[5] !== void 0) {
		rangeslider1_props.values = /*gathers*/ ctx[5];
	}

	const rangeslider1 = new RangeSlider({ props: rangeslider1_props });
	binding_callbacks.push(() => bind(rangeslider1, "values", rangeslider1_values_binding));

	function rangeslider2_values_binding(value) {
		/*rangeslider2_values_binding*/ ctx[32].call(null, value);
	}

	let rangeslider2_props = {
		max: days,
		step: 1,
		tooltip: /*tooltip*/ ctx[12],
		disabled: !/*enabled*/ ctx[9].includes("Shielding the elderly")
	};

	if (/*elderly*/ ctx[7] !== void 0) {
		rangeslider2_props.values = /*elderly*/ ctx[7];
	}

	const rangeslider2 = new RangeSlider({ props: rangeslider2_props });
	binding_callbacks.push(() => bind(rangeslider2, "values", rangeslider2_values_binding));

	return {
		c() {
			section0 = element("section");
			div0 = element("div");
			label0 = element("label");
			input0 = element("input");
			t0 = text("\n            Schools closed on days");
			t1 = space();
			div1 = element("div");
			t2 = space();
			div2 = element("div");

			div2.innerHTML = `
          Community acceptance may be stronger if alternative services for childcare and student learning and provision of nutrition are established. We used reductions in contacts by age groups in our age-structured model to replicate the findings of Litinova et al. (2019) (<a href="https://www.thelancet.com/action/showPdf?pii=S2352-4642%2820%2930095-X" target="_blank" class="svelte-jt39wy">Reference</a>)
        `;

			t6 = space();
			div4 = element("div");
			div3 = element("div");
			create_component(rangeslider0.$$.fragment);
			t7 = space();
			section1 = element("section");
			div5 = element("div");
			label1 = element("label");
			input1 = element("input");
			t8 = text("\n            No mass gatherings on days");
			t9 = space();
			div6 = element("div");
			t10 = space();
			div7 = element("div");

			div7.innerHTML = `
          Engage with community and religious leaders to articulate value-based decisions and encourage local adoption. Adaptation of existing events, including outdoor services or services in shifts, may be helpful in localities where cancellation of gatherings is not practical. We assumed a reduction in transmission by 28%. (<a href="https://www.pnas.org/content/104/18/7588" target="_blank" class="svelte-jt39wy">Reference</a>)
        `;

			t14 = space();
			div9 = element("div");
			div8 = element("div");
			create_component(rangeslider1.$$.fragment);
			t15 = space();
			section2 = element("section");
			div10 = element("div");
			label2 = element("label");
			input2 = element("input");
			t16 = text("\n            Shield the elderly on days");
			t17 = space();
			div11 = element("div");
			t18 = space();
			div12 = element("div");

			div12.innerHTML = `
          While there is a limited evidence base for a “shielding” strategy, such an approach might be of benefit to certain at-risk groups for severe outcomes. We assumed a reduction in transmission among the elderly cohort and their contacts of 50%. (<a href="https://www.imperial.ac.uk/media/imperial-college/medicine/sph/ide/gida-fellowships/Imperial-College-COVID19-NPI-modelling-16-03-2020.pdf" target="_blank" class="svelte-jt39wy">Reference</a>)
        `;

			t22 = space();
			div14 = element("div");
			div13 = element("div");
			create_component(rangeslider2.$$.fragment);
			attr(input0, "type", "checkbox");
			input0.__value = input0_value_value = "School closure";
			input0.value = input0.__value;
			attr(input0, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][0].push(input0);
			attr(label0, "class", "control-label svelte-jt39wy");
			attr(div0, "class", "control-name svelte-jt39wy");
			toggle_class(div0, "enabled", /*enabled*/ ctx[9].includes("School closure"));
			attr(div1, "class", "control-tooltip svelte-jt39wy");
			attr(div2, "class", "control-explanation svelte-jt39wy");
			attr(div3, "class", "slider-container svelte-jt39wy");
			attr(div4, "class", "control-group slider svelte-jt39wy");
			attr(section0, "class", "control svelte-jt39wy");
			attr(input1, "type", "checkbox");
			input1.__value = input1_value_value = "Cancel mass gatherings";
			input1.value = input1.__value;
			attr(input1, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][0].push(input1);
			attr(label1, "class", "control-label svelte-jt39wy");
			attr(div5, "class", "control-name svelte-jt39wy");
			toggle_class(div5, "enabled", /*enabled*/ ctx[9].includes("Cancel mass gatherings"));
			attr(div6, "class", "control-tooltip svelte-jt39wy");
			attr(div7, "class", "control-explanation svelte-jt39wy");
			attr(div8, "class", "slider-container svelte-jt39wy");
			attr(div9, "class", "control-group slider svelte-jt39wy");
			attr(section1, "class", "control svelte-jt39wy");
			attr(input2, "type", "checkbox");
			input2.__value = input2_value_value = "Shielding the elderly";
			input2.value = input2.__value;
			attr(input2, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][0].push(input2);
			attr(label2, "class", "control-label svelte-jt39wy");
			attr(div10, "class", "control-name svelte-jt39wy");
			toggle_class(div10, "enabled", /*enabled*/ ctx[9].includes("Shielding the elderly"));
			attr(div11, "class", "control-tooltip svelte-jt39wy");
			attr(div12, "class", "control-explanation svelte-jt39wy");
			attr(div13, "class", "slider-container svelte-jt39wy");
			attr(div14, "class", "control-group slider svelte-jt39wy");
			attr(section2, "class", "control svelte-jt39wy");
		},
		m(target, anchor) {
			insert(target, section0, anchor);
			append(section0, div0);
			append(div0, label0);
			append(label0, input0);
			input0.checked = ~/*enabled*/ ctx[9].indexOf(input0.__value);
			append(label0, t0);
			append(section0, t1);
			append(section0, div1);
			append(section0, t2);
			append(section0, div2);
			append(section0, t6);
			append(section0, div4);
			append(div4, div3);
			mount_component(rangeslider0, div3, null);
			insert(target, t7, anchor);
			insert(target, section1, anchor);
			append(section1, div5);
			append(div5, label1);
			append(label1, input1);
			input1.checked = ~/*enabled*/ ctx[9].indexOf(input1.__value);
			append(label1, t8);
			append(section1, t9);
			append(section1, div6);
			append(section1, t10);
			append(section1, div7);
			append(section1, t14);
			append(section1, div9);
			append(div9, div8);
			mount_component(rangeslider1, div8, null);
			insert(target, t15, anchor);
			insert(target, section2, anchor);
			append(section2, div10);
			append(div10, label2);
			append(label2, input2);
			input2.checked = ~/*enabled*/ ctx[9].indexOf(input2.__value);
			append(label2, t16);
			append(section2, t17);
			append(section2, div11);
			append(section2, t18);
			append(section2, div12);
			append(section2, t22);
			append(section2, div14);
			append(div14, div13);
			mount_component(rangeslider2, div13, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler_1*/ ctx[27]),
					listen(div1, "click", /*showExplanation*/ ctx[14]),
					listen(input1, "change", /*input1_change_handler_1*/ ctx[29]),
					listen(div6, "click", /*showExplanation*/ ctx[14]),
					listen(input2, "change", /*input2_change_handler_1*/ ctx[31]),
					listen(div11, "click", /*showExplanation*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*enabled*/ 512) {
				input0.checked = ~/*enabled*/ ctx[9].indexOf(input0.__value);
			}

			if (dirty[0] & /*enabled*/ 512) {
				toggle_class(div0, "enabled", /*enabled*/ ctx[9].includes("School closure"));
			}

			const rangeslider0_changes = {};
			if (dirty[0] & /*enabled*/ 512) rangeslider0_changes.disabled = !/*enabled*/ ctx[9].includes("School closure");

			if (!updating_values && dirty[0] & /*schools*/ 64) {
				updating_values = true;
				rangeslider0_changes.values = /*schools*/ ctx[6];
				add_flush_callback(() => updating_values = false);
			}

			rangeslider0.$set(rangeslider0_changes);

			if (dirty[0] & /*enabled*/ 512) {
				input1.checked = ~/*enabled*/ ctx[9].indexOf(input1.__value);
			}

			if (dirty[0] & /*enabled*/ 512) {
				toggle_class(div5, "enabled", /*enabled*/ ctx[9].includes("Cancel mass gatherings"));
			}

			const rangeslider1_changes = {};
			if (dirty[0] & /*enabled*/ 512) rangeslider1_changes.disabled = !/*enabled*/ ctx[9].includes("Cancel mass gatherings");

			if (!updating_values_1 && dirty[0] & /*gathers*/ 32) {
				updating_values_1 = true;
				rangeslider1_changes.values = /*gathers*/ ctx[5];
				add_flush_callback(() => updating_values_1 = false);
			}

			rangeslider1.$set(rangeslider1_changes);

			if (dirty[0] & /*enabled*/ 512) {
				input2.checked = ~/*enabled*/ ctx[9].indexOf(input2.__value);
			}

			if (dirty[0] & /*enabled*/ 512) {
				toggle_class(div10, "enabled", /*enabled*/ ctx[9].includes("Shielding the elderly"));
			}

			const rangeslider2_changes = {};
			if (dirty[0] & /*enabled*/ 512) rangeslider2_changes.disabled = !/*enabled*/ ctx[9].includes("Shielding the elderly");

			if (!updating_values_2 && dirty[0] & /*elderly*/ 128) {
				updating_values_2 = true;
				rangeslider2_changes.values = /*elderly*/ ctx[7];
				add_flush_callback(() => updating_values_2 = false);
			}

			rangeslider2.$set(rangeslider2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangeslider0.$$.fragment, local);
			transition_in(rangeslider1.$$.fragment, local);
			transition_in(rangeslider2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangeslider0.$$.fragment, local);
			transition_out(rangeslider1.$$.fragment, local);
			transition_out(rangeslider2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section0);
			/*$$binding_groups*/ ctx[21][0].splice(/*$$binding_groups*/ ctx[21][0].indexOf(input0), 1);
			destroy_component(rangeslider0);
			if (detaching) detach(t7);
			if (detaching) detach(section1);
			/*$$binding_groups*/ ctx[21][0].splice(/*$$binding_groups*/ ctx[21][0].indexOf(input1), 1);
			destroy_component(rangeslider1);
			if (detaching) detach(t15);
			if (detaching) detach(section2);
			/*$$binding_groups*/ ctx[21][0].splice(/*$$binding_groups*/ ctx[21][0].indexOf(input2), 1);
			destroy_component(rangeslider2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let section3;
	let section0;
	let h1;
	let t0;
	let t1;
	let p;
	let t3;
	let nav;
	let button0;
	let t5;
	let button1;
	let t7;
	let t8;
	let section2;
	let t9;
	let t10;
	let section1;
	let div0;
	let label;
	let input;
	let input_value_value;
	let t11;
	let t12;
	let t13;
	let div2;
	let t14;
	let div1;
	let updating_values;
	let t15;
	let current;
	let mounted;
	let dispose;

	const covidgraph = new CovidGraph({
			props: {
				region: /*region*/ ctx[0],
				interventions: /*interventions*/ ctx[10],
				compartment: /*compartment*/ ctx[1],
				days
			}
		});

	let if_block0 = /*explain*/ ctx[11] && create_if_block_5(ctx);
	let if_block1 = /*stacked*/ ctx[13] && create_if_block_4(ctx);
	let if_block2 = /*stacked*/ ctx[13] && create_if_block_3(ctx);
	let if_block3 = /*stacked*/ ctx[13] && create_if_block_2(ctx);
	let if_block4 = /*simple*/ ctx[3] && create_if_block_1(ctx);

	function rangeslider_values_binding_1(value) {
		/*rangeslider_values_binding_1*/ ctx[26].call(null, value);
	}

	let rangeslider_props = {
		max: days,
		step: 1,
		tooltip: /*tooltip*/ ctx[12],
		disabled: !/*enabled*/ ctx[9].includes("Shelter in place")
	};

	if (/*shelter*/ ctx[4] !== void 0) {
		rangeslider_props.values = /*shelter*/ ctx[4];
	}

	const rangeslider = new RangeSlider({ props: rangeslider_props });
	binding_callbacks.push(() => bind(rangeslider, "values", rangeslider_values_binding_1));
	let if_block5 = /*stacked*/ ctx[13] && create_if_block(ctx);

	return {
		c() {
			section3 = element("section");
			section0 = element("section");
			h1 = element("h1");
			t0 = text(/*region*/ ctx[0]);
			t1 = space();
			p = element("p");
			p.textContent = "per million population";
			t3 = space();
			nav = element("nav");
			button0 = element("button");
			button0.textContent = "Infections";
			t5 = space();
			button1 = element("button");
			button1.textContent = "Deaths";
			t7 = space();
			create_component(covidgraph.$$.fragment);
			t8 = space();
			section2 = element("section");
			if (if_block0) if_block0.c();
			t9 = space();
			if (if_block1) if_block1.c();
			t10 = space();
			section1 = element("section");
			div0 = element("div");
			label = element("label");
			input = element("input");
			t11 = text("\n          Shelter in place ");
			if (if_block2) if_block2.c();
			t12 = space();
			if (if_block3) if_block3.c();
			t13 = space();
			div2 = element("div");
			if (if_block4) if_block4.c();
			t14 = space();
			div1 = element("div");
			create_component(rangeslider.$$.fragment);
			t15 = space();
			if (if_block5) if_block5.c();
			attr(h1, "class", "title svelte-jt39wy");
			attr(p, "class", "subtitle svelte-jt39wy");
			attr(button0, "class", "svelte-jt39wy");
			toggle_class(button0, "active", /*compartment*/ ctx[1] === "Infected");
			attr(button1, "class", "svelte-jt39wy");
			toggle_class(button1, "active", /*compartment*/ ctx[1] === "Dead");
			attr(nav, "class", "compartment-tabs svelte-jt39wy");
			attr(section0, "class", "compartments svelte-jt39wy");
			attr(input, "type", "checkbox");
			input.__value = input_value_value = "Shelter in place";
			input.value = input.__value;
			attr(input, "class", "svelte-jt39wy");
			/*$$binding_groups*/ ctx[21][0].push(input);
			attr(label, "class", "control-label svelte-jt39wy");
			attr(div0, "class", "control-name svelte-jt39wy");
			toggle_class(div0, "enabled", /*enabled*/ ctx[9].includes("Shelter in place"));
			attr(div1, "class", "slider-container svelte-jt39wy");
			attr(div2, "class", "control-group slider svelte-jt39wy");
			attr(section1, "class", "control svelte-jt39wy");
			attr(section2, "class", "controls svelte-jt39wy");
			attr(section3, "class", "covid-simulator svelte-jt39wy");
			toggle_class(section3, "stacked", /*stacked*/ ctx[13]);
			toggle_class(section3, "simple", /*simple*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, section3, anchor);
			append(section3, section0);
			append(section0, h1);
			append(h1, t0);
			append(section0, t1);
			append(section0, p);
			append(section0, t3);
			append(section0, nav);
			append(nav, button0);
			append(nav, t5);
			append(nav, button1);
			append(section0, t7);
			mount_component(covidgraph, section0, null);
			append(section3, t8);
			append(section3, section2);
			if (if_block0) if_block0.m(section2, null);
			append(section2, t9);
			if (if_block1) if_block1.m(section2, null);
			append(section2, t10);
			append(section2, section1);
			append(section1, div0);
			append(div0, label);
			append(label, input);
			input.checked = ~/*enabled*/ ctx[9].indexOf(input.__value);
			append(label, t11);
			if (if_block2) if_block2.m(label, null);
			append(section1, t12);
			if (if_block3) if_block3.m(section1, null);
			append(section1, t13);
			append(section1, div2);
			if (if_block4) if_block4.m(div2, null);
			append(div2, t14);
			append(div2, div1);
			mount_component(rangeslider, div1, null);
			append(section2, t15);
			if (if_block5) if_block5.m(section2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[18]),
					listen(button1, "click", /*click_handler_1*/ ctx[19]),
					listen(input, "change", /*input_change_handler*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*region*/ 1) set_data(t0, /*region*/ ctx[0]);

			if (dirty[0] & /*compartment*/ 2) {
				toggle_class(button0, "active", /*compartment*/ ctx[1] === "Infected");
			}

			if (dirty[0] & /*compartment*/ 2) {
				toggle_class(button1, "active", /*compartment*/ ctx[1] === "Dead");
			}

			const covidgraph_changes = {};
			if (dirty[0] & /*region*/ 1) covidgraph_changes.region = /*region*/ ctx[0];
			if (dirty[0] & /*interventions*/ 1024) covidgraph_changes.interventions = /*interventions*/ ctx[10];
			if (dirty[0] & /*compartment*/ 2) covidgraph_changes.compartment = /*compartment*/ ctx[1];
			covidgraph.$set(covidgraph_changes);

			if (/*explain*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*explain*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(section2, t9);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*stacked*/ ctx[13]) if_block1.p(ctx, dirty);

			if (dirty[0] & /*enabled*/ 512) {
				input.checked = ~/*enabled*/ ctx[9].indexOf(input.__value);
			}

			if (dirty[0] & /*enabled*/ 512) {
				toggle_class(div0, "enabled", /*enabled*/ ctx[9].includes("Shelter in place"));
			}

			if (/*simple*/ ctx[3]) {
				if (if_block4) {
					
				} else {
					if_block4 = create_if_block_1(ctx);
					if_block4.c();
					if_block4.m(div2, t14);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			const rangeslider_changes = {};
			if (dirty[0] & /*enabled*/ 512) rangeslider_changes.disabled = !/*enabled*/ ctx[9].includes("Shelter in place");

			if (!updating_values && dirty[0] & /*shelter*/ 16) {
				updating_values = true;
				rangeslider_changes.values = /*shelter*/ ctx[4];
				add_flush_callback(() => updating_values = false);
			}

			rangeslider.$set(rangeslider_changes);
			if (/*stacked*/ ctx[13]) if_block5.p(ctx, dirty);

			if (dirty[0] & /*stacked*/ 8192) {
				toggle_class(section3, "stacked", /*stacked*/ ctx[13]);
			}

			if (dirty[0] & /*simple*/ 8) {
				toggle_class(section3, "simple", /*simple*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(covidgraph.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(rangeslider.$$.fragment, local);
			transition_in(if_block5);
			current = true;
		},
		o(local) {
			transition_out(covidgraph.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(rangeslider.$$.fragment, local);
			transition_out(if_block5);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section3);
			destroy_component(covidgraph);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*$$binding_groups*/ ctx[21][0].splice(/*$$binding_groups*/ ctx[21][0].indexOf(input), 1);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			destroy_component(rangeslider);
			if (if_block5) if_block5.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

let days = 180;

function instance($$self, $$props, $$invalidate) {
	let { region } = $$props;
	let { preset = null } = $$props;
	let compartment = "Infected";
	let tooltip = wNumb({ decimals: 0, thousand: "," });
	let tracing = false;
	let simple, shelter, gathers, schools, elderly, quarantine;

	switch (preset) {
		case "shelter-only":
			simple = false;
			quarantine = [0, 0];
			shelter = [0, 60];
			schools = [0, 0];
			gathers = [0, 0];
			elderly = [0, 0];
			break;
		case "shelter-plus":
			simple = false;
			quarantine = [0, 0];
			shelter = [0, 60];
			schools = [0, 60];
			gathers = [0, 60];
			elderly = [0, 60];
			break;
		case "none":
			simple = false;
			quarantine = [0, 0];
			shelter = [0, 0];
			schools = [0, 0];
			gathers = [0, 0];
			elderly = [0, 0];
			break;
		case "elderly":
			simple = false;
			quarantine = [0, 0];
			shelter = [0, 0];
			schools = [0, 0];
			gathers = [0, 0];
			elderly = [0, 180];
			break;
		case "schools":
			simple = false;
			quarantine = [0, 0];
			shelter = [0, 0];
			schools = [0, 180];
			gathers = [0, 0];
			elderly = [0, 0];
			break;
		case "1":
			simple = true;
			shelter = [21, 90];
			break;
		case "3":
			simple = true;
			shelter = [21, 60];
			break;
		case "2":
		case "4":
		case "5":
		default:
			simple = false;
			quarantine = [90, 180];
			shelter = [21, 90];
			schools = [21, 120];
			gathers = [21, 90];
			elderly = [21, 120];
	}

	let stacked = !simple;

	let keys = [
		"Shelter in place",
		"Cancel mass gatherings",
		"School closure",
		"Shielding the elderly",
		"Quarantine"
	];

	let enabled = keys.slice();
	let qkey = "Quarantine";
	let interventions = {};
	let explain = false;

	let showExplanation = e => {
		if (explain) {
			return $$invalidate(11, explain = false);
		}

		let control = e.target.parentElement;

		$$invalidate(11, explain = {
			name: control.querySelector(".control-name").innerText,
			body: control.querySelector(".control-explanation").innerHTML
		});
	};

	const $$binding_groups = [[], []];
	const click_handler = () => $$invalidate(1, compartment = "Infected");
	const click_handler_1 = () => $$invalidate(1, compartment = "Dead");

	function input0_change_handler() {
		enabled = get_binding_group_value($$binding_groups[0]);
		$$invalidate(9, enabled);
	}

	function input1_change_handler() {
		tracing = this.__value;
		$$invalidate(2, tracing);
	}

	function input2_change_handler() {
		tracing = this.__value;
		$$invalidate(2, tracing);
	}

	function rangeslider_values_binding(value) {
		quarantine = value;
		$$invalidate(8, quarantine);
	}

	function input_change_handler() {
		enabled = get_binding_group_value($$binding_groups[0]);
		$$invalidate(9, enabled);
	}

	function rangeslider_values_binding_1(value) {
		shelter = value;
		$$invalidate(4, shelter);
	}

	function input0_change_handler_1() {
		enabled = get_binding_group_value($$binding_groups[0]);
		$$invalidate(9, enabled);
	}

	function rangeslider0_values_binding(value) {
		schools = value;
		$$invalidate(6, schools);
	}

	function input1_change_handler_1() {
		enabled = get_binding_group_value($$binding_groups[0]);
		$$invalidate(9, enabled);
	}

	function rangeslider1_values_binding(value) {
		gathers = value;
		$$invalidate(5, gathers);
	}

	function input2_change_handler_1() {
		enabled = get_binding_group_value($$binding_groups[0]);
		$$invalidate(9, enabled);
	}

	function rangeslider2_values_binding(value) {
		elderly = value;
		$$invalidate(7, elderly);
	}

	$$self.$set = $$props => {
		if ("region" in $$props) $$invalidate(0, region = $$props.region);
		if ("preset" in $$props) $$invalidate(15, preset = $$props.preset);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*region*/ 1) {
			$: $$invalidate(0, region = region[0].toUpperCase() + region.slice(1));
		}

		if ($$self.$$.dirty[0] & /*tracing*/ 4) {
			$: $$invalidate(16, qkey = tracing ? "Quarantine and tracing" : "Quarantine");
		}

		if ($$self.$$.dirty[0] & /*simple, shelter, enabled, gathers, schools, elderly, qkey, quarantine*/ 66552) {
			$: {
				if (simple) {
					$$invalidate(10, interventions = { "Shelter in place": shelter });
				} else {
					$$invalidate(10, interventions = {});

					for (let key of keys) {
						switch (key) {
							case "Cancel mass gatherings":
								$$invalidate(10, interventions[key] = enabled.includes(key) ? gathers : [0, 0], interventions);
								break;
							case "School closure":
								$$invalidate(10, interventions[key] = enabled.includes(key) ? schools : [0, 0], interventions);
								break;
							case "Shelter in place":
								$$invalidate(10, interventions[key] = enabled.includes(key) ? shelter : [0, 0], interventions);
								break;
							case "Shielding the elderly":
								$$invalidate(10, interventions[key] = enabled.includes(key) ? elderly : [0, 0], interventions);
								break;
							case "Quarantine":
								$$invalidate(10, interventions[qkey] = enabled.includes(key) ? quarantine : [0, 0], interventions);
								break;
						}
					}
				}
			}
		}
	};

	return [
		region,
		compartment,
		tracing,
		simple,
		shelter,
		gathers,
		schools,
		elderly,
		quarantine,
		enabled,
		interventions,
		explain,
		tooltip,
		stacked,
		showExplanation,
		preset,
		qkey,
		keys,
		click_handler,
		click_handler_1,
		input0_change_handler,
		$$binding_groups,
		input1_change_handler,
		input2_change_handler,
		rangeslider_values_binding,
		input_change_handler,
		rangeslider_values_binding_1,
		input0_change_handler_1,
		rangeslider0_values_binding,
		input1_change_handler_1,
		rangeslider1_values_binding,
		input2_change_handler_1,
		rangeslider2_values_binding
	];
}

class CovidSimulator extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { region: 0, preset: 15 }, [-1, -1]);
	}
}

export default CovidSimulator;