import './RangeSlider.css.proxy.js';
/* src/RangeSlider.svelte generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	detach,
	element as element_1,
	init,
	insert,
	noop,
	safe_not_equal
} from "../web_modules/svelte/internal.js";

import { onDestroy, onMount } from "../web_modules/svelte.js";
import noUiSlider from "../web_modules/nouislider.js";
import wNumb from "../web_modules/wnumb.js";

function create_fragment(ctx) {
	let div;

	return {
		c() {
			div = element_1("div");
			attr(div, "class", "rangeSlider");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[11](div);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[11](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let slider = undefined;
	let element = undefined;
	let { tooltip = false } = $$props;
	let { min = 0 } = $$props;
	let { max = 100 } = $$props;
	let { margin = 0 } = $$props;
	let { values = [0] } = $$props;
	let { step = null } = $$props;
	let { updateWhenSliding = false } = $$props;
	let { disabled = false } = $$props;

	onMount(() => {
		slider = noUiSlider.create(element, {
			start: values,
			step,
			margin,
			behaviour: "drag-tap",
			connect: values.length > 1,
			range: { min, max },
			tooltips: values.length === 1 ? [tooltip] : [tooltip, tooltip]
		});

		if (disabled) element.setAttribute("disabled", true);
		slider.on("set", onSliderValueSet);

		slider.on("slide", values => {
			if (updateWhenSliding) onSliderValueSet(values);
		});
	});

	function onSliderValueSet(_values) {
		$$invalidate(1, values = _values.map(tooltip.from));
	}

	onDestroy(() => {
		if (!slider) return;
		slider.off();
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$$invalidate(0, element = $$value);
		});
	}

	$$self.$set = $$props => {
		if ("tooltip" in $$props) $$invalidate(2, tooltip = $$props.tooltip);
		if ("min" in $$props) $$invalidate(3, min = $$props.min);
		if ("max" in $$props) $$invalidate(4, max = $$props.max);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
		if ("values" in $$props) $$invalidate(1, values = $$props.values);
		if ("step" in $$props) $$invalidate(6, step = $$props.step);
		if ("updateWhenSliding" in $$props) $$invalidate(7, updateWhenSliding = $$props.updateWhenSliding);
		if ("disabled" in $$props) $$invalidate(8, disabled = $$props.disabled);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, disabled*/ 257) {
			$: {
				if (element) {
					if (disabled) {
						element.setAttribute("disabled", true);
					} else {
						element.removeAttribute("disabled");
					}
				}
			}
		}
	};

	return [
		element,
		values,
		tooltip,
		min,
		max,
		margin,
		step,
		updateWhenSliding,
		disabled,
		slider,
		onSliderValueSet,
		div_binding
	];
}

class RangeSlider extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			tooltip: 2,
			min: 3,
			max: 4,
			margin: 5,
			values: 1,
			step: 6,
			updateWhenSliding: 7,
			disabled: 8
		});
	}
}

export default RangeSlider;