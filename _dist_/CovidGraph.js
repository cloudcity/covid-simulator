import './CovidGraph.css.proxy.js';
/* src/CovidGraph.svelte generated by Svelte v3.23.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../web_modules/svelte/internal.js";

import { onMount } from "../web_modules/svelte.js";
import { writable } from "../web_modules/svelte/store.js";
import vegaEmbed from "../web_modules/vega-embed.js";
import model from "./model.js";

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let section0;
	let t2;
	let section1;
	let p0;
	let t5;
	let p1;
	let t6;
	let span1;
	let t7_value = /*deathCounts*/ ctx[1][0] + "";
	let t7;
	let t8;
	let p2;
	let t9;
	let span2;
	let t10_value = /*deathCounts*/ ctx[1][1] + "";
	let t10;
	let t11;
	let p3;
	let t12;
	let span3;
	let t13_value = /*deathCounts*/ ctx[1][2] + "";
	let t13;
	let t14;
	let p4;
	let t15;
	let span4;
	let t16;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			section0 = element("section");
			section0.textContent = "The simulation begins on day zero with 1,000 people infected, 1,000 people exposed, and 1 million people total.";
			t2 = space();
			section1 = element("section");
			p0 = element("p");
			p0.innerHTML = `<span class="big svelte-1okghyu">Deaths</span> per million`;
			t5 = space();
			p1 = element("p");
			t6 = text("< 19 years old");
			span1 = element("span");
			t7 = text(t7_value);
			t8 = space();
			p2 = element("p");
			t9 = text("20 - 59 years old");
			span2 = element("span");
			t10 = text(t10_value);
			t11 = space();
			p3 = element("p");
			t12 = text("60+ years old");
			span3 = element("span");
			t13 = text(t13_value);
			t14 = space();
			p4 = element("p");
			t15 = text("Total ");
			span4 = element("span");
			t16 = text(/*deathsTotal*/ ctx[2]);
			attr(div0, "class", "covid-graph-vega svelte-1okghyu");
			attr(section0, "class", "footnote svelte-1okghyu");
			attr(p0, "class", "svelte-1okghyu");
			attr(span1, "class", "big svelte-1okghyu");
			attr(p1, "class", "svelte-1okghyu");
			attr(span2, "class", "big svelte-1okghyu");
			attr(p2, "class", "svelte-1okghyu");
			attr(span3, "class", "big svelte-1okghyu");
			attr(p3, "class", "svelte-1okghyu");
			attr(span4, "class", "big svelte-1okghyu");
			attr(p4, "class", "total svelte-1okghyu");
			attr(section1, "class", "numbers svelte-1okghyu");
			attr(div1, "class", "covid-graph-container svelte-1okghyu");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			/*div0_binding*/ ctx[14](div0);
			append(div1, t0);
			append(div1, section0);
			append(div1, t2);
			append(div1, section1);
			append(section1, p0);
			append(section1, t5);
			append(section1, p1);
			append(p1, t6);
			append(p1, span1);
			append(span1, t7);
			append(section1, t8);
			append(section1, p2);
			append(p2, t9);
			append(p2, span2);
			append(span2, t10);
			append(section1, t11);
			append(section1, p3);
			append(p3, t12);
			append(p3, span3);
			append(span3, t13);
			append(section1, t14);
			append(section1, p4);
			append(p4, t15);
			append(p4, span4);
			append(span4, t16);
		},
		p(ctx, [dirty]) {
			if (dirty & /*deathCounts*/ 2 && t7_value !== (t7_value = /*deathCounts*/ ctx[1][0] + "")) set_data(t7, t7_value);
			if (dirty & /*deathCounts*/ 2 && t10_value !== (t10_value = /*deathCounts*/ ctx[1][1] + "")) set_data(t10, t10_value);
			if (dirty & /*deathCounts*/ 2 && t13_value !== (t13_value = /*deathCounts*/ ctx[1][2] + "")) set_data(t13, t13_value);
			if (dirty & /*deathsTotal*/ 4) set_data(t16, /*deathsTotal*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			/*div0_binding*/ ctx[14](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { compartment } = $$props;
	let { region } = $$props;
	let { interventions } = $$props;
	let { days } = $$props;
	let vega, vegaElement;
	let deathCounts = [];
	let modelData = {};
	let compartmentName;
	let seriesData = [];
	let worstCases = {};
	let vegaSpec = {};

	function spec(worstCases, compartment) {
		let yTitle = ({
			"Infected": "Currently infected per million",
			"Dead": "Cumulative deaths per million"
		})[compartment];

		let yHeight = worstCases[compartment];

		return {
			"config": {
				"view": {
					"continuousWidth": 400,
					"continuousHeight": 300
				},
				"axis": {
					"titleFont": "Karla",
					"titleFontSize": 13,
					"labelFont": "Karla",
					"labelFontSize": 13
				}
			},
			"data": { "name": "seriesData" },
			"mark": {
				"type": "line",
				"clip": true,
				"strokeWidth": 4,
				"color": {
					"x1": 1,
					"y1": 1,
					"x2": 1,
					"y2": 0,
					"gradient": "linear",
					"stops": [
						{ "offset": 0, "color": "#F0883F" },
						{ "offset": 1, "color": "#D31408" }
					]
				}
			},
			"encoding": {
				"x": {
					"type": "quantitative",
					"axis": {
						"title": "Day",
						"titleFontSize": 13,
						"titleFontWeight": "normal",
						"labelFlush": false
					},
					"field": "days",
					"scale": { "domain": [0, days] }
				},
				"y": {
					"type": "quantitative",
					"axis": {
						"title": yTitle,
						"titleFontWeight": "normal",
						"titleFontSize": 13
					},
					"field": "pop",
					"scale": { "domain": [0, yHeight] }
				}
			},
			"$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json",
			"width": "container",
			"height": 300,
			"autosize": { "type": "fit", "contains": "padding" },
			"padding": { "bottom": 10 },
			"background": "#F7F7F8"
		};
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$$invalidate(0, vegaElement = $$value);
		});
	}

	$$self.$set = $$props => {
		if ("compartment" in $$props) $$invalidate(3, compartment = $$props.compartment);
		if ("region" in $$props) $$invalidate(4, region = $$props.region);
		if ("interventions" in $$props) $$invalidate(5, interventions = $$props.interventions);
		if ("days" in $$props) $$invalidate(6, days = $$props.days);
	};

	let deathsTotal;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*region, interventions, days*/ 112) {
			$: $$invalidate(7, modelData = model.generateData(region, interventions, days));
		}

		if ($$self.$$.dirty & /*compartment*/ 8) {
			$: $$invalidate(8, compartmentName = compartment === "Infected"
			? "Combined Infected"
			: compartment);
		}

		if ($$self.$$.dirty & /*modelData, compartmentName*/ 384) {
			$: $$invalidate(9, seriesData = modelData[compartmentName].map((v, d) => ({ days: d, pop: Math.round(v) })));
		}

		if ($$self.$$.dirty & /*modelData*/ 128) {
			$: $$invalidate(1, deathCounts = modelData["cohortDeaths"].map(Math.round).map(n => n.toLocaleString()));
		}

		if ($$self.$$.dirty & /*modelData*/ 128) {
			$: $$invalidate(2, deathsTotal = Math.round(modelData["cohortDeaths"].reduce((t, n) => t + n)).toLocaleString());
		}

		if ($$self.$$.dirty & /*region, days*/ 80) {
			$: {
				let modelWorstData = model.generateData(region, {}, days);
				$$invalidate(10, worstCases = {});

				for (let key in modelWorstData) {
					$$invalidate(10, worstCases[key] = modelWorstData[key].reduce((m, n) => m > n ? m : n), worstCases);
				}
			}
		}

		if ($$self.$$.dirty & /*worstCases, compartment, days*/ 1096) {
			$: $$invalidate(11, vegaSpec = spec(worstCases, compartment, days));
		}

		if ($$self.$$.dirty & /*vegaElement, vegaSpec, seriesData*/ 2561) {
			$: {
				if (vegaElement && vegaSpec) {
					vegaEmbed(vegaElement, vegaSpec).then(result => result.view.insert("seriesData", seriesData).run()).catch(console.error);
				}
			}
		}
	};

	return [
		vegaElement,
		deathCounts,
		deathsTotal,
		compartment,
		region,
		interventions,
		days,
		modelData,
		compartmentName,
		seriesData,
		worstCases,
		vegaSpec,
		vega,
		spec,
		div0_binding
	];
}

class CovidGraph extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			compartment: 3,
			region: 4,
			interventions: 5,
			days: 6
		});
	}
}

export default CovidGraph;